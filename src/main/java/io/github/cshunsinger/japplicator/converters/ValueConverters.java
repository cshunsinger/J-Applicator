package io.github.cshunsinger.japplicator.converters;

import io.github.cshunsinger.asmsauce.code.CodeInsnBuilderLike;
import io.github.cshunsinger.japplicator.exception.TypeVariableUnsupportedException;
import io.github.cshunsinger.japplicator.exception.WildcardTypeUnsupportedException;

import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;

import static io.github.cshunsinger.asmsauce.code.CodeBuilders.getVar;

/**
 * Contains code for generating asmsauce code builders which will generate the JVM bytecode for converting values
 * of one type into values of other types.
 */
public class ValueConverters {
    /**
     * Create the asmsauce code builders to handle the conversion of one type of data into another type of data.
     * The generated bytecode will use casting, auto-boxing/unboxing, and loops/iterators to convert between different
     * data types.
     * @param sourceLocalVar The name of the local variable containing the source value.
     * @param sourceType The source value type.
     * @param destType The desired type to convert the source value in to.
     * @return A code builder, which will generate bytecode to convert a source value into a destination value of a
     * desired type.
     * @throws WildcardTypeUnsupportedException If a wildcard type is encountered.
     * @throws TypeVariableUnsupportedException If a type variable is encountered.
     */
    public static CodeInsnBuilderLike createValueConverter(String sourceLocalVar, Type sourceType, Type destType) throws WildcardTypeUnsupportedException, TypeVariableUnsupportedException {
        //Wildcards and variable generic types are not supported
        if(sourceType instanceof WildcardType || destType instanceof WildcardType)
            throw new WildcardTypeUnsupportedException();
        else if(sourceType instanceof TypeVariable || destType instanceof TypeVariable)
            throw new TypeVariableUnsupportedException();

        CodeInsnBuilderLike codeBuilder;

        //Collection -> Collection conversion
        if((codeBuilder = CollectionValueConverter.createCollectionToCollectionValueConverter(sourceLocalVar, sourceType, destType)) != null)
            return codeBuilder;

        //Array -> Array conversion
        if((codeBuilder = ArrayValueConverter.createArrayToArrayValueConverter(sourceLocalVar, sourceType, destType)) != null)
            return codeBuilder;

        //Collection -> Array conversion
        if((codeBuilder = ArrayValueConverter.createCollectionToArrayValueConverter(sourceLocalVar, sourceType, destType)) != null)
            return codeBuilder;

        //Array -> Collection conversion
        if((codeBuilder = CollectionValueConverter.createArrayToCollectionValueConverter(sourceLocalVar, sourceType, destType)) != null)
            return codeBuilder;

        //Single value -> single value conversion
        return SingleValueConverter.createSingletonValueConverter(getVar(sourceLocalVar), sourceType, destType);
    }
}